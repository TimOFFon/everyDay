function packMan(foods) {
    let excrements = [];
    for (let i = 0; i < foods.length; i++) {
        excrements.push(typeof foods[i]);
    }
    return console.log(excrements);
}
// Задачки: =========================================
const whatIsIt1 = "не число" / 2; // NaN
const whatIsIt2 = NaN + 2; // NaN
const whatIsIt3 = 'NaN' + 2; // NaN
const whatIsIt4 = 2 / 0; // Infinity
const whatIsIt5 = -2 / 0; // -Infinity
const whatIsIt6 = 2 / 2; // 1
const whatIsIt7 = '2' / 2; // 1
const whatIsIt8 = typeof true; // boolean

// Задачки: =========================================

/* 
1 000 000 — миллион (6 нулей)
1 000 000 000 — миллиард или биллион (9 нулей)
1 000 000 000 000 — триллион (12 нулей)
1 000 000 000 000 000 — квадриллион (15 нулей) */

// Вопросы:========================================
/* 1). Сколько типов данных?   (8)
2). Перечисли их.  (number(NaN,infinity,-infinity), BigInt, null, undefinded, string, object, simboll, boolean)
3). Перечисли примитивы. (number, BigInt, null, undefined, boolean, simboll, string)
4). Перечисли специальные числовые значения (NaN,infinity,-infinity)
5). Результат деления числа на ноль (Infinity)
6). Что означает NaN (математическую шибку)
7). Какое число можно сохранить только в BigInt? (9007199254740991 + 1) 
8). Чтобы создать значение типа BigInt, необходимо добавить в конец числового литерала? (n) 
9). Сколько типов кавычек сущесвует в JavaScript? (3)
10). Перечисли их через запятую? ("", '', ``)
11). Какое выражение позволяют использовать такие кавычки `` ? (${…})
12). Сколько значений принимает булевый тип? (2)
13). Перечисли их через запятую? (true, false)
14). Результатом чего могут быть булевые значения? (сравнения)
15). К какому типу относится специальное значение null? (null)
16). Является ли null «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках? (нет)
17). Перечисли через запятую три описательных словосочитания, определяющие специальное значение null? («ничего», «пусто», «значение неизвестно»)
18). Какой тип у специального значения undefined? (undefined)
19). Что означает значение undefined? (значение не было присвоено)
20). Что рекоммендутся использовать для присвоения переменной «пустого» или «неизвестного» значения, null или undefined? (null)
21). Что хранят в особенном типе object? (коллекции данных,сложные структуры)
22). Для чего используется тип simboll? (для создания уникальных идентификаторов в объектах)
23). Что возвращает оператор typeof? (тип аргумента)
24). Сколько у оператора typeof есть синтактических форм? (2) 
25). Напишите синтактические формы typeof через запятую, используя x вместо аргумента? (typeof x, typeof(x))
26). Какого типа данные возвращает оператор typeof? (строка с типом данных
27). Что вернёт typeof undefined?  ("undefined")
28). Что вернёт typeof 0? ("number")
29). Что вернёт typeof 10n? ("bigint")
30). Что вернёт typeof true? ("boolean")
31). Что вернёт typeof "foo"? ("string")
32). Что вернёт typeof Symbol("id")? ("symbol")
33). Что вернёт typeof Math?  ("object")  
34). Что вернёт typeof null? ("object")
35). Что вернёт typeof alert? ("function")
36). Напиши встроенный объект, который предоставляет математические операции и константы? (Math)
37). Является ли null объектом? (нет)
38). Есть ли в JavaScript специальный тип «функция»? (нет)
39). Какой тип для целых чисел произвольной длины? (bigint)
40). Какой оператор позволяет нам увидеть, какой тип данных сохранён в переменной? (typeof)
  */
// Вопросы:========================================



//Задачи learnJS====== На гитхаб!!!!!!! =============
//===================================================
// let name = 'Ilya';

// alert(`hello ${1}`); // 'hello 1' ✅

// alert(`hello ${"name"}`); // 'hello 'name''✅

// alert(`hello ${name}`); // 'hello Ilya'✅

//===================================================

//  Type Number ----------------------------------
const typesArrNum = [
    1,
    2.5,
    Infinity, -Infinity,
    NaN //Любая операция с NaN возвращает NaN.NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции.
]

// packMan(typesArrNum);
// ['number', 'number', 'number', 'number', 'number']


// BigInt Type ------------------------------------

// 9.007.199.254.740.991 < BigInt (тех.ограничения)
//гигантские числа, например, в криптографии или при использовании метки времени («timestamp») с микросекундами
const x = BigInt(10);
const y = BigInt(3);
const z = x / y; //3n (округляет)
// console.log(z);

const e = 5;
// const b = x / e; //TypeError: Cannot mix BigInt and other types, use explicit conversions
// console.log(b);

// const a = +x; //TypeError: Cannot convert a BigInt value to a number
// console.log(a);

// String Type ---------------------------------------

//Двойные кавычки: "Привет".
//Одинарные кавычки: 'Привет'.
//Обратные кавычки: `Привет`.

//Обратные же кавычки имеют расширенную функциональность. Они позволяют нам встраивать выражения в строку, заключая их в ${…}.




// Boolean type ---------------------------------------

// true, false
// результаты сравнений

true === true // true
true === false // false
true !== false // true
1000 > 10 // true
1000 < 10 // false



// null Type -----------------------------------------

//null не является «ссылкой на несуществующий объект» или «нулевым указателем»

//специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно»

//null используется для присвоения переменной «пустого» или «неизвестного» значения

// console.log(typeof null); // object



// undefined  Type ---------------------------------

//Оно означает, что «значение не было присвоено

let noName;
// console.log(noName); // undefined


//undefined –  используется для проверок, была ли переменная назначена
const obj = {
        'a and b': 1,
        'c': 2,
    }
    // console.log(obj['d'] === undefined); // true



// object Type --------------------------------------
// НЕ ПРИМИТИВ - передаётся по ссылке

// null
// object
// array



// symbol Type
//используется для создания уникальных идентификаторов в объектах