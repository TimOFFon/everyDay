/** Перебор:   forEach
 * 
 * Array.prototype.forEach()
 * 
 * Метод forEach() выполняет указанную функцию один 
 * раз для каждого элемента в массиве.
 */

let arrNumb = [1, 2, 3];
// arrNumb.forEach(element => console.log(element)); 
// 1
// 2
// 3

/**      Синтаксис
 * 
 *       arr.forEach(function callback(currentValue, index, array) {
 *       your iterator
 *       }[, thisArg]);
 *
 * 
 *      Параметры:___________________________________________
 * 
 *     **callback**
 *     Функция, которая будет вызвана для каждого 
 *     элемента массива. Она принимает от одного до трёх 
 *     аргументов:
 * 
 *     *currentValue* - Текущий обрабатываемый элемент в массиве.
 * 
 *     *index* (Необязательный) - Индекс текущего обрабатываемого 
 *             элемента в массиве.
 * 
 *      *array* (Необязательный) - Массив, по которому 
 *             осуществляется проход.
 * 
 *    *thisArg* (Необязательный) - Значение, используемое 
 *              в качестве this при вызове функции callback.
 * 
 * Возвращаемое значение - undefined.
 */

/** Описание
 * 
 * Метод forEach() выполняет функцию callback один раз 
 * для каждого элемента, находящегося в массиве в порядке 
 * возрастания. 
 * Она не будет вызвана для удалённых или пропущенных элементов 
 * массива. Однако, она будет вызвана для элементов, которые 
 * присутствуют в массиве и имеют значение undefined.
 * 
 * 
 * Функция callback будет вызвана с тремя аргументами:
*
*      значение элемента (value)
*      индекс элемента (index)
*      массив, по которому осуществляется проход (array)
 */

/**
 * Если в метод forEach() был передан параметр thisArg, 
 * при вызове callback он будет использоваться в качестве 
 * значения this. 
 * В противном случае, в качестве значения this будет 
 * использоваться значение undefined. 
 * В конечном итоге, значение this, наблюдаемое из функции 
 * callback, определяется согласно обычным 
 * правилам определения this, видимого из функции.
 */

/**
 * Диапазон элементов, обрабатываемых методом forEach(), 
 * устанавливается до первого вызова функции callback. 
 * Элементы, добавленные в массив после начала выполнения 
 * метода forEach(), не будут посещены функцией callback. 
 * Если существующие элементы массива изменятся, значения, 
 * переданные в функцию callback, 
 * будут значениями на тот момент времени, 
 * когда метод forEach() посетит их; 
 * удалённые элементы посещены не будут. 
 * Если уже посещённые элементы удаляются во время итерации 
 * (например, с помощью shift()), 
 * последующие элементы будут пропущены.
 */

/**
 * Не существует способа остановить или прервать цикл forEach() 
 * кроме как выбрасыванием исключения. 
 * Если вам необходимо такое поведение, 
 * метод forEach() неправильный выбор.
 * 
 * Досрочное прекращение может быть достигнуто с:
 * 
 * Простой цикл for
 * Циклы for...of / for...in
 * Array.prototype.every()
 * Array.prototype.some()
 * Array.prototype.find()
 * Array.prototype.findIndex()
 * 
 */

/**
 * Если нужно протестировать элементы массива 
 * на условие и нужно вернуть булево значение, 
 * вы можете воспользоваться методами 
 * every(), some(), find() или findIndex().
 */

/**
 * Метод forEach() выполняет функцию callback один раз 
 * для каждого элемента массива; в отличие от методов 
 * every() и some(), он всегда возвращает значение undefined.
 */

//===============================================================
//=====  Нет операции для неинициализированных значений  =======
//===============================================================

let arrSpace = [1, 3, , , 7];
let countIteration = null;


// arrSpace.forEach((element, index) => {
//     console.log('element = ' + element);
//     console.log('index = ' + index);
//     countIteration++ ;
// });

// element = 1
// index = 0
// element = 3
// index = 1
// element = 7
// index = 4


// console.log('countIteration = ', countIteration);
// countIteration =  3

//===============================================================
//===============  Конвертируем цикл for в forEach  ============
//===============================================================

let arrItems = ['item1', 'item2', 'item3'];
let arrClone = [];

for(let i = 0; i < arrItems.length; i++) {
    arrClone.push(item[i]);
};
//--------------------------------------------------
let arrItems2 = ['item1', 'item2', 'item3'];
let arrClone2 = [];

arrItems2.forEach(function(item) {
    arrClone2.push(item);
});