/** ДОБАВЛЕНИЕ / УДАЛЕНИЕ 
 * Array.prototype.concat() -  ВОЗРАЩАЕТ НОВЫЙ МАССИВ
 * 
 * Метод concat() возвращает новый массив, состоящий 
 * из массива, на котором он был вызван, соединённого с 
 * другими массивами и/или значениями, переданными в 
 * качестве аргументов.
 * 
 */

let arr1 = ['a', 'b', 'c'];
let arr2 = ['d', 'e', 'f'];
let arr3 = arr1.concat(arr2);
// console.log(arr3);
// Array(6)0: "a"1: "b"2: "c"3: "d"4: "e"5: "f"  length: 6[[Prototype]]: Array(0)

/**           Синтаксис
 * 
 *           var new_array = 
 *           old_array.concat(value1[, value2[,
 *           ...[, valueN]]])
 */

/**           Параметры
 * 
 *            ***valueN**
 *            Массивы и/или значения, соединяемые в новый массив.   
 */

/**           Возвращаемое значение
 *          
 *            Новый экземпляр Array.
 */

/**
 *  Описание
 *  Метод concat создаёт новый массив, состоящий 
 *  из элементов в объекте, на котором он был вызван, 
 *  за которыми по порядку следуют, для каждого аргумента, 
 *  все его элементы (если аргумент является массивом), 
 *  либо сам аргумент (если он массивом не является).
 * 
 * Метод concat не изменяет данный массив или любой 
 * из массивов, переданных в аргументах, а вместо этого 
 * возвращает поверхностную копию, содержащую копии 
 * тех элементов, что были объединены с исходными массивами. 
 * Элементы оригинальных массивов копируются в новый массив 
 * по следующим правилам:
 * 
 * Ссылки на объекты (но не фактические объекты): 
 * метод concat копирует ссылки на объекты в новый массив. 
 * И оригинал, и новый массив ссылаются на один и тот же объект. 
 * То есть, если объект по ссылке будет изменён, изменения будут 
 * видны и в новом, и в исходном массивах.
 * 
 * Строки, числа и булевы значения 
 * (но не объекты String, Number или Boolean): 
 * метод concat копирует значения строк и чисел в новый массив.
 * 
 * Соединение массивов и/или значений в новый массив оставит
 *  соединяемые массивы/значения неизменными. 
 * Кроме того, любая операция над новым массивом 
 * (если только элемент не является ссылкой) не будет 
 * затрагивать исходные массивы и наоборот.
 */

//-------------------------------------------------------------
//-----------------  Соединение двух массивов -----------------
//-------------------------------------------------------------

let arrLetters = ['a', 'b', 'c'];
let arrNumbers = [1, 2, 3];
let arrMix = arrLetters.concat(arrNumbers);

// console.log(arrMix); // ['a', 'b', 'c', 1, 2, 3]

//-------------------------------------------------------------
//-----------------  Соединение трёх массивов -----------------
//-------------------------------------------------------------

let arrNum1 = [1, 2, 3],
    arrNum2 = [4, 5, 6],
    arrNum3 = [7, 8, 9];
let arrNumsMix = arrNum1.concat(arrNum2, arrNum3);

// console.log(arrNumsMix); // [1, 2, 3, 4, 5, 6, 7, 8, 9]

//-------------------------------------------------------------
//-----------------  Соединение значений в массив -------------
//-------------------------------------------------------------

let arrLetters2 = ['a', 'b', 'c'];
let arrLettNumb = arrLetters2.concat(1, [2, 3], ['A, B'], 4, 5);

// console.log(arrLettNumb); 
// ['a', 'b', 'c', 1, 2, 3, 'A, B', 4, 5]