//=============    Types  ======================
//=============    Types  ======================
//=============    Types  ======================


//"Шаблонные строки"
//------------------------------------------------
//Что выведет этот скрипт?

let name = "Ilya";

`hello ${1}`; // 'hello 1'

`hello ${"name"}`; // 'hello name'

`hello ${name}`; // 'hello Ilya'

// type of
//------------------------------------------------
typeof 0; // Number
typeof BigInt(10); // bigint
typeof "string"; // string
typeof true; // boolean
typeof null; // object (null)
typeof undefined; // undefined
Symbol("id"); // simboll
typeof Math; // object

//=============    Operators  ======================
//=============    Operators  ======================
//=============    Operators  ======================

//===============================================
// Математические (бинарные/унарные)
//===============================================


//Унарные]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//minuse----- меняет знак числа на противоположный ------

let onePositive = 1;

onePositive = -onePositive;

console.log(onePositive); //-1

//pluse---- если операнд не число, унарный плюс преобразует его в число ----

let notNumber = '';

notNumber = +notNumber;

console.log(notNumber); // 0

//Бинарные]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

/* Применить к строкам, то он их объединяет в одну +
если хотя бы один операнд является строкой,
то второй будет также преобразован в строку */

//Взятие остатка от деления %

// Возведение в степень ** (a ** b  умножает a на само себя b раз)

// Извлечение корня ( x ** (1/3) )

//Сокращённая арифметика с присваиванием]]]]]]]]]]]]]]]]]]]]]]]
/* 
 += -= *= /=
Вызов с присваиванием имеет в точности такой же приоритет, 
как обычное присваивание (3)
*/

// Приоритет ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
/* 
 (, < (? : = += -= **= *= /= %=) < (?? ||) < && < (== != === !== ) <
(<  <=  >  >=) < (+ -) < (*  /  %) < ** < (! ~ + - ++ -- typeof) < (…++ …--) < ())
*/

//Присваивание по цепочке  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
/*
let a, b, c; 
a = b = c = 2 + 2;
*/

//Инкремент/декремент]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
// ++префиксная форма (ИЗМЕНИЯЕТ и возвращает НОВОЕ значение)
// постфиксная форма++ (ИЗМЕНИЯЕТ и возвращает СТАРОЕ значение)

//Оператор "Запятая"
//удобно использовать в цикле двумерных масиивов
// for (a = 1, b = 3, c = a * b; a < 10; a++) {
//     ...
//    }


//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//]]]]]]]]]]]]]]]]]]]] Задачи ]]]]]]]]]]]]]]]]]]]]]]]]//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//Постфиксная и префиксная формы
//Чему будут равны переменные a, b, c и d в примере ниже?
let a = 1,
    b = 1;

let c = ++a; // 2
let d = b++; // 1

//Результат присваивания
//Чему будут равны переменные a и x после исполнения кода в примере ниже?

let a2 = 2;

let x = 1 + (a2 *= 2); // 5

//Преобразование типов
//Какой результат будет у выражений ниже?
"" + 1 + 0; // "10"

"" - 1 + 0; // -1 

true + false; // 1

6 / "3"; // 2

"2" * "3"; // 6

4 + 5 + "px"; // "9px"

"$" + 4 + 5; // "$45"

"4" - 2; // 2

"4px" - 2; // NaN

"  -9  " + 5; // "  -9  5"

"  -9  " - 5; // -14

null + 1; // 1

undefined + 1; // NaN

" \t \n" - 2; // -2

//Исправьте сложение
/*
Ниже приведён код, который запрашивает у пользователя 
два числа и показывает их сумму.

Он работает неправильно. 
Код в примере выводит 12 
(для значения полей по умолчанию).

В чём ошибка? Исправьте её. 
Результат должен быть 3.

let a = prompt("Первое число?", 1);
let b = prompt("Второе число?", 2);

alert(a + b); // 12
*/
(+a + +b);


//===============================================
// Операторы сравнения
//===============================================
//Результат сравнения имеет логический тип

//Сравнение строк]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//строки сравниваются посимвольно
//"A" не равна строчной "a" (Unicode)

//Сравнение разных типов]]]]]]]]]]]]]]]]]]]]]]]]]

/*При сравнении значений разных типов 
JavaScript приводит каждое из них к числу.*/
'2' > 1 // true
    '01' == 1 // true

//Логическое значение true становится 1, а false – 0
true == 1 // true
false == 0 // false

let a3 = 0;
Boolean(a3) // false (логическое преобразование 0)

let b3 = "0";
Boolean(b3) // true (лог.преобр. не пустая строка)

a3 == b3; // true (строка в число)

//Проблемы
//не отличает 0 от false

0 == false // true

    '' == false // true

//Строгое сравнение]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//без приведения типов
0 === false // false


//Сравнение с null и undefined]]]]]]]]]]]]]]]]]]]]]
/* При нестрогом равенстве ==
эти значения равны друг другу и не равны никаким
другим значениям*/

null == undefined // true

/* При использовании математических операторов
и других операторов сравнения < > <= >= 
значения null/undefined преобразуются 
к числам: null становится 0, а undefined – NaN
*/

null > 0 // false (числ. преобр. в 0)
null == 0 // false (null равен undefined и ничему)
null >= 0 // true (числ. преобр. в 0)

//Несравненное значение undefined]]]]]]]]]]]]]]]]]

//Значение undefined несравнимо с другими значениями:

undefined > 0 // false (числ. преоб вернёт NaN)

undefined < 0 // false (числ. преоб вернёт NaN)

undefined == 0 // false (null == undefined и ничему)

/*NaN – это специальное числовое значение, 
которое возвращает false при любых сравнениях */

//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//]]]]]]]]]]]]]]]]]]]] Задачи ]]]]]]]]]]]]]]]]]]]]]]]]//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//Операторы сравнения

//Каким будет результат этих выражений?

5 > 4 // true
    "ананас" > "яблоко" // false
"2" > "12" // true
undefined == null // true
undefined === null // false
null == "\n0\n"; // false
null === +"\n0\n" // false


//===============================================
// Операторы сравнения
//===============================================

// ОПЕРАТОР  || (ИЛИ)]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//Если значение не логического типа, то оно к нему приводится в целях вычислений

//ИЛИ «||» цепочка ИЛИ || возвращает первое истинное значение или последнее, если такое значение не найдено. возвращает последний из них.

//Значение возвращается в исходном виде, без преобразования.

1 || 0 // 1
true || 'no matter what' // true
null || 1 // 1 (первое истинное значение)
null || 0 || 1 // 1 (первое истинное значение)
undefined || null || 0 // 0 (поскольку все ложно, возвращается последнее значение)

//Сокращённое вычисление
let x4;
true || (x4 = 1); // undefined

let x5;
false || (x5 = 1); // 1

// ОПЕРАТОР && (И) ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//И «&&» находит первое ложное значение. Если все операнды были истинными, возвращается последний.

// Если первый операнд истинный,
// И возвращает второй:
1 && 0 // 0
1 && 5 // 5

// Если первый операнд ложный,
// И возвращает его. Второй операнд игнорируется
null && 5 // null
0 && "no matter what" // 0
1 && 2 && null && 3 // null
1 && 2 && 3 // 3

//Приоритет оператора && больше, чем у ||

//Как и оператор ИЛИ ||, И && иногда может заменять if
let x6 = 1;
x6 > 0 && console.log('Greater than zero!');

// аналог:
let x7 = 1;
if (x7 > 0) {
    console.log('Greater than zero!');
}

// ОПЕРАТОР ! (НЕ)]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
/*
1. Сначала приводит аргумент к логическому типу true/false.
2. Затем возвращает противоположное значение.
*/
!true // false
console.log(!0) // true

//двойное НЕ !! используют для преобразования значений к логическому типу
!!"non-empty string" // true
!!null // false

// первое НЕ преобразует значение в логическое значение и возвращает обратное, а второе НЕ снова инвертирует его

//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//]]]]]]]]]]]]]]]]]]]] Задачи ]]]]]]]]]]]]]]]]]]]]]]]]//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//Что выведет alert (ИЛИ)?
null || 2 || undefined // 2

//Что выведет alert (ИЛИ)?
// alert - не возвращает значений (undefined)
alert(alert(1) || 2 || alert(3)); // 2

//Что выведет alert (И)?
1 && null && 2 // null

//Что выведет alert (И)?
alert(alert(1) && alert(2)); // 1

//Что выведет этот код?
alert(null || 2 && 3 || 4);
(2 && 3); // 3
null || 3 || 4; // 3

//Проверка значения из диапазона
/* Напишите условие if для проверки, что переменная age находится в диапазоне между 14 и 90 включительно.

«Включительно» означает, что значение переменной age может быть равно 14 или 90. */

if (age >= 14 && age <= 90);

//Проверка значения вне диапазона
/* Напишите условие if для проверки, что значение переменной age НЕ находится в диапазоне 14 и 90 включительно.

Напишите два варианта: первый с использованием оператора НЕ !, второй – без этого оператора. */
if (!(age >= 14 && age <= 90));
if (age > 14 || age < 90);

//Вопрос о "if"
/* Какие из перечисленных ниже alert выполнятся?

Какие конкретно значения будут результатами выражений в условиях if(...)? */

if (-1 || 0) alert('first'); // yes (-1 это boolean true)
if (-1 && 0) alert('second'); // no
if (null || -1 && 1) alert('third'); // yes

//Проверка логина
/* Напишите код, который будет спрашивать логин с помощью prompt.

Если посетитель вводит «Админ», то prompt запрашивает пароль, если ничего не введено или нажата клавиша Esc – показать «Отменено», в противном случае отобразить «Я вас не знаю».

Пароль проверять так:

Если введён пароль «Я главный», то выводить «Здравствуйте!»,
Иначе – «Неверный пароль»,
При отмене – «Отменено». */

let userName = prompt("Кто там?", '');

if (userName === 'Админ') {

    let pass = prompt('Пароль?', '');

    if (pass === 'Я главный') {
        alert('Здравствуйте!');
    } else if (pass === '' || pass === null) {
        alert('Отменено');
    } else {
        alert('Неверный пароль');
    }

} else if (userName === '' || userName === null) {
    alert('Отменено');
} else {
    alert("Я вас не знаю");
}



//=======    Конструкция "switch"  ===============
//=========    Конструкция "switch"  =================
//=========    Конструкция "switch" ==============

//Конструкция switch заменяет собой сразу несколько if.
//Проверка на равенство всегда строгая. Значения должны быть одного типа.

//Синтаксис

// switch (x) {
//     case 'value1': //<---вместо if
//         ... //<---исполняющий код
//         [
//             break//<--- прерывает проверки
//         ]

//     case 'value2': //<---вместо if
//         ...//<---исполняющий код
//         [
//             break//<--- прерывает проверки
//         ]

//     default: //<--- ни один "case" не сработал
//         ...//<---исполняющий код
//         [
//             break//<--- прерывает проверки
// ]
// }

let a7 = 2 + 2;

switch (a7) {
    case 3:
        console.log('Маловато');
        break;
    case 4:
        console.log('В точку!'); //<---- Goal!!!
        break;
    case 5:
        console.log('Перебор');
        break;
    default:
        console.log("Нет таких значений");
}

/* Если break нет, то выполнение пойдёт ниже по следующим case, при этом остальные проверки игнорируются. */

//Любое выражение может быть аргументом для switch/case

let a8 = "1";
let b8 = 0;

switch (+a8) {
    case b8 + 1:
        console.log("Выполнится, т.к. значением +a8 будет 1, что в точности равно b8+1");
        break;

    default:
        console.log("Это не выполнится");
}

//Группировка «case»
let a9 = 3;

switch (a9) {
    case 4:
        console.log('Правильно!');
        break;

    case 3: // (*) группируем оба case
    case 5:
        console.log('Неправильно!');
        console.log("Может вам посетить урок математики?");
        break;

    default:
        console.log('Результат выглядит странновато. Честно.');
}
//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//]]]]]]]]]]]]]]]]]]]] Задачи ]]]]]]]]]]]]]]]]]]]]]]]]//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//Напишите "if", аналогичный "switch"
switch (browser) {
    case 'Edge':
        console.log("You've got the Edge!");
        break;

    case 'Chrome':
    case 'Firefox':
    case 'Safari':
    case 'Opera':
        console.log('Okay we support these browsers too');
        break;

    default:
        console.log('We hope that this page looks ok!');
}

//-----------------------------------

if (browser === 'Edge') {
    console.log("You've got the Edge!");
} else if (browser === 'Chrome' ||
    browser === 'Firefox' ||
    browser === 'Safari' ||
    browser === 'Opera') {
    console.log('Okay we support these browsers too');
} else {
    console.log('We hope that this page looks ok!');
}

//Переписать условия "if" на "switch"
const number = +prompt('Введите число между 0 и 3', '');

if (number === 0) {
    console.log('Вы ввели число 0');
}

if (number === 1) {
    console.log('Вы ввели число 1');
}

if (number === 2 || number === 3) {
    console.log('Вы ввели число 2, а может и 3');
}

//-------------------------------------------------
switch (number) {
    case 0:
        console.log('Вы ввели число 0');
        break;
    case 1:
        console.log('Вы ввели число 1');
        break;
    case 2:
    case 3:
        console.log('Вы ввели число 2, а может и 3');
        break;
}



//====================================================
//================== Function ========================
//====================================================
// Функция – это значение, представляющее «действие»
/*
 function имя(параметры) {
     ...тело...
   }
*/

//Внешняя переменная используется, только если внутри функции нет такой локальной.
//Функция всегда получает только копию значения:!!!!!

//Параметр – это переменная, указанная в круглых скобках в объявлении функции.

//Аргумент – это значение, которое передаётся функции при её вызове.

//Результат функции с пустым return или без него – undefined

// Имя Функции ------------------------------------
/*
Функции, начинающиеся с…

"get…" – возвращают значение,
"calc…" – что-то вычисляют,
"create…" – что-то создают,
"check…" – что-то проверяют и возвращают логическое значение, и т.д.
*/

/* 
showMessage(..)     // показывает сообщение

getAge(..)          // возвращает возраст (в каком-либо значении)

calcSum(..)         // вычисляет сумму и возвращает результат

createForm(..)      // создаёт форму (и обычно возвращает её)

checkPermission(..) // проверяет доступ, возвращая true/false
 */

//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//]]]]]]]]]]]]]]]]]]]] Задачи ]]]]]]]]]]]]]]]]]]]]]]]]//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//Обязателен ли "else"?
/* Следующая функция возвращает true, если параметр age больше 18.

В ином случае она запрашивает подтверждение через confirm и возвращает его результат: */
function checkAge(age) {
    if (age > 18) {
        return true;
    } else {
        // ...
        return confirm('Родители разрешили?');
    }
}
//Будет ли эта функция работать как-то иначе, если убрать else?
function checkAge(age) {
    if (age > 18) {
        return true;
    }
    // ...
    return confirm('Родители разрешили?');
}
//Answer: no

//Перепишите функцию, используя оператор '?' или '||'
/*
 Следующая функция возвращает true, если параметр age больше 18.

В ином случае она задаёт вопрос confirm и возвращает его результат.
 */
function checkAge(age) {
    if (age > 18) {
        return true;
    } else {
        return confirm('Родители разрешили?');
    }
}

/* Перепишите функцию, чтобы она делала то же самое, но без if, в одну строку.

Сделайте два варианта функции checkAge:

Используя оператор ?
Используя оператор || 
*/
//------------------------------------------

function checkAge(age) {
    return age > 18 ? true : confirm('Родители разрешили?');
}

function checkAge(age) {
    return age > 18 || confirm('Родители разрешили?');
}

//Функция min(a, b)
/* 
Напишите функцию min(a,b), которая возвращает меньшее из чисел a и b.

Пример вызовов:
min(2, 5) == 2
min(3, -1) == -1
min(1, 1) == 1
*/

function choiceMin(a, b) {
    return a < b ? a : b;
}

//Функция pow(x,n)
/* 
Напишите функцию pow(x,n), которая возвращает x в степени n. Иначе говоря, умножает x на себя n раз и возвращает результат.
pow(3, 2) = 3 * 3 = 9
pow(3, 3) = 3 * 3 * 3 = 27
pow(1, 100) = 1 * 1 * ...* 1 = 1

Создайте страницу, которая запрашивает x и n, а затем выводит результат pow(x,n).
*/
// let numberX = prompt("x?", '');
// let expN = prompt("n?", '');


// function exponNumber(x, n) {
//     for (i = n; i > 0; i--) {
//         x *= x;
//     }
//     return x;
// }


// function checkNumber(x, n) {
//     if (n < 1) {
//         alert(`Степень ${n} не поддерживается, используйте натуральное число`);
//     } else {
//         alert(exponNumber(x, n));
//     }
// }

// checkNumber(numberX, expN);

//====================================================
//========== Function Expression   ================
//====================================================

//(Функциональное Выражение) !!! Выражение !!!

function sayHi() { // (1) создаём
    alert("Привет");
}

let func = sayHi; // (2) копируем

func(); // Привет    // (3) вызываем копию (работает)!
sayHi(); // Привет   //     прежняя тоже работает (почему бы нет)

//====================================================
//========== Функции-«колбэки»   ================
//====================================================

/* 
передаём функцию и ожидаем, что она вызовется обратно (от англ. «call back» – обратный вызов) когда-нибудь позже, если это будет необходимо. 
*/
//---------------------------------------------

function ask(question, yes, no) {
    if (confirm(question)) yes()
    else no();
}

function showOk() {
    alert("Вы согласны.");
}

function showCancel() {
    alert("Вы отменили выполнение.");
}

// использование: функции showOk, showCancel передаются в качестве аргументов ask
ask("Вы согласны?", showOk, showCancel);
/*
showOk становится колбэком’ для ответа «yes», а showCancel – для ответа «no».
*/

//---------------------------------------------

// Анонимные функции как колбэки
function ask(question, yes, no) {
    if (confirm(question)) yes()
    else no();
}

ask(
    "Вы согласны?",
    function() { alert("Вы согласились."); },
    function() { alert("Вы отменили выполнение."); }
);

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
/* Function Expression создаётся, когда выполнение доходит до него, и затем уже может использоваться. */
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
/* Function Declaration можно использовать во всем скрипте (или блоке кода, если функция объявлена в блоке). */
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
/*В строгом режиме, когда Function Declaration находится в блоке {...}, функция доступна везде внутри блока. Но не снаружи него. */
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

let age = 16; // присвоим для примера 16

if (age < 18) {
    welcome(); //  (выполнится)

    function welcome() {
        alert("Привет!"); //  Function Declaration доступно
    } //  во всём блоке кода, в котором объявлено

    welcome(); // /   (выполнится)

} else {

    function welcome() {
        alert("Здравствуйте!");
    }
}

// здесь фигурная скобка закрывается,
// поэтому Function Declaration, созданные внутри блока кода выше -- недоступны отсюда.

welcome(); // Ошибка: welcome is not defined

//====================================================
//========== Стрелочные функции   ================
//====================================================
//Цель стрелочных функций - краткость.


//(arrow functions)
//let func = (arg1, arg2, ...argN) => expression;
//let sum = (a, b) => a + b;

//Если у нас только один аргумент, то круглые скобки вокруг параметров можно опустить, сделав запись ещё короче:
//let double = n => n * 2;

//Если аргументов нет, круглые скобки будут пустыми, но они должны присутствовать:
//let sayHi = () => alert("Hello!");

/*Стрелочные функции можно использовать так же, как и Function Expression.
Например, для динамического создания функции: */

let age2 = prompt("Сколько Вам лет?", 18);

let welcome = (age2 < 18) ?
    () => alert('Привет!') :
    () => alert("Здравствуйте!");


//Многострочные стрелочные функции
let sum = (a, b) => { // фигурная скобка, открывающая тело многострочной функции
    let result = a + b;
    return result; // если мы используем фигурные скобки, то нам нужно явно указать "return"
};

//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
//]]]]]]]]]]]]]]]]]]]] Задачи ]]]]]]]]]]]]]]]]]]]]]]]]//]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//Замените код Function Expression стрелочной функцией:

function ask(question, yes, no) {
    if (confirm(question)) yes()
    else no();
}

ask(
    "Вы согласны?",
    () => alert("Вы согласились."),
    () => alert("Вы отменили выполнение.")
);